'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _slider = require('./slider.css');

var _slider2 = _interopRequireDefault(_slider);

var _rcTipso = require('rc-tipso');

var _rcTipso2 = _interopRequireDefault(_rcTipso);

var _utils = require('../shared/utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Dragger = function (_React$Component) {
  _inherits(Dragger, _React$Component);

  function Dragger(props) {
    _classCallCheck(this, Dragger);

    var _this = _possibleConstructorReturn(this, (Dragger.__proto__ || Object.getPrototypeOf(Dragger)).call(this, props));

    _this.state = {
      draging: false
    };
    _this.startX = 0;

    _this.setLeft = _this.setLeft.bind(_this);
    _this.handleMouseDown = _this.handleMouseDown.bind(_this);
    _this.handleMouseMove = _this.handleMouseMove.bind(_this);
    _this.handleMouseUp = _this.handleMouseUp.bind(_this);
    _this.resetOrigin = _this.resetOrigin.bind(_this);
    return _this;
  }

  _createClass(Dragger, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.resetOrigin();
      if (window.addEventListener) {
        window.addEventListener('resize', this.resetOrigin, true);
      } else {
        window.addEventListener('onresize', this.resetOrigin);
      }
      if (document.addEventListener) {
        document.addEventListener('scroll', this.resetOrigin, true);
        document.addEventListener('mousemove', this.handleMouseMove, true);
        document.addEventListener('mouseup', this.handleMouseUp, true);
      } else {
        document.addEventListener('onscroll', this.resetOrigin);
        document.attachEvent('onmousemove', this.handleMouseMove);
        document.attachEvent('onmouseup', this.handleMouseUp);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (window.addEventListener) {
        window.removeEventListener('resize', this.resetOrigin, true);
      } else {
        window.detachEvent('onresize', this.resetOrigin);
      }
      if (document.removeEventListener) {
        document.removeEventListener('scroll', this.resetOrigin, true);
        document.removeEventListener('mousemove', this.handleMouseMove, true);
        document.removeEventListener('mouseup', this.handleMouseUp, true);
      } else {
        document.detachEvent('onscroll', this.resetOrigin);
        document.detachEvent('onmousemove', this.handleMouseMove);
        document.detachEvent('onmouseup', this.handleMouseUp);
      }
    }
  }, {
    key: 'resetOrigin',
    value: function resetOrigin() {
      var centerPoint = _reactDom2.default.findDOMNode(this.dragger);
      var centerPointPos = centerPoint.getBoundingClientRect();
      this.startX = centerPointPos.left + centerPoint.clientWidth;
    }
  }, {
    key: 'handleMouseMove',
    value: function handleMouseMove(e) {
      if (this.state.draging) {
        var pos = _utils2.default.mousePosition(e);
        this.setLeft(pos);
      }
    }
  }, {
    key: 'handleMouseUp',
    value: function handleMouseUp(e) {
      if (this.state.draging) {
        this.setState({
          draging: false
        });
        var pos = _utils2.default.mousePosition(e);
        this.setLeft(pos, true);
      }
    }
  }, {
    key: 'handleMouseDown',
    value: function handleMouseDown(e) {
      var event = e || window.event;
      event.preventDefault();
      event.stopPropagation();
      this.setState({
        draging: true
      });
      var pos = _utils2.default.mousePosition(event);
      this.startX = pos.x;
    }
  }, {
    key: 'setLeft',
    value: function setLeft(position) {
      var mouseUp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      var dragX = position.x;
      var _props = this.props,
          maxDis = _props.maxDis,
          onDragEnd = _props.onDragEnd,
          onDraging = _props.onDraging,
          min = _props.min,
          max = _props.max;

      if (this.startX !== dragX) {
        var percentage = (dragX - this.startX) / maxDis;
        var validateLeft = _utils2.default.validatePosition(this.props.originLeft + percentage, min, max);
        onDraging && onDraging(validateLeft);
        if (mouseUp) {
          onDragEnd && onDragEnd(validateLeft);
        }
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props2 = this.props,
          color = _props2.color,
          left = _props2.left,
          value = _props2.value,
          tipFormatter = _props2.tipFormatter;

      var dragClass = (0, _classnames2.default)(_slider2.default.dragger, color && _slider2.default[color]);
      return _react2.default.createElement(
        _rcTipso2.default,
        {
          theme: 'dark',
          show: this.state.draging,
          tipsoContent: _react2.default.createElement(
            'div',
            { style: {
                textAlign: 'center'
              } },
            tipFormatter ? tipFormatter(value) : value
          ),
          className: _slider2.default.tipso,
          wrapperClass: _slider2.default['dragger-container'],
          wrapperStyle: {
            left: left * 100 + '%'
          } },
        _react2.default.createElement('div', {
          className: dragClass,
          ref: function ref(_ref) {
            return _this2.dragger = _ref;
          },
          onMouseDown: this.handleMouseDown })
      );
    }
  }]);

  return Dragger;
}(_react2.default.Component);

Dragger.propTypes = {
  color: _react.PropTypes.string,
  left: _react.PropTypes.number,
  value: _react.PropTypes.number,
  originLeft: _react.PropTypes.number,
  maxDis: _react.PropTypes.number,
  min: _react.PropTypes.number,
  max: _react.PropTypes.number,
  onDragEnd: _react.PropTypes.func,
  onDraging: _react.PropTypes.func
};

Dragger.defaultProps = {
  left: 0,
  value: 0,
  originLeft: 0,
  maxDis: 0,
  min: 0,
  max: 0,
  color: 'green',
  onDragEnd: function onDragEnd() {},
  onDraging: function onDraging() {}
};

exports.default = Dragger;