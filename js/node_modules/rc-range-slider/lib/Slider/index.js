'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _Dragger = require('./Dragger');

var _Dragger2 = _interopRequireDefault(_Dragger);

var _ProgressBar = require('./ProgressBar');

var _ProgressBar2 = _interopRequireDefault(_ProgressBar);

var _slider = require('./slider.css');

var _slider2 = _interopRequireDefault(_slider);

var _utils = require('../shared/utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Slider = function (_React$Component) {
  _inherits(Slider, _React$Component);

  function Slider(props) {
    _classCallCheck(this, Slider);

    var _this = _possibleConstructorReturn(this, (Slider.__proto__ || Object.getPrototypeOf(Slider)).call(this, props));

    _this.state = (0, _objectAssign2.default)({}, _this.initialState(props), {
      maxDis: 0
    });
    _this.onChange = _this.onChange.bind(_this);
    _this.onDraging = _this.onDraging.bind(_this);
    _this.onDragEnd = _this.onDragEnd.bind(_this);
    _this.changePosition = _this.changePosition.bind(_this);
    return _this;
  }

  _createClass(Slider, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.resetOrigin();
      if (window.addEventListener) {
        window.addEventListener('resize', this.resetOrigin, true);
      } else {
        window.addEventListener('onresize', this.resetOrigin);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (window.addEventListener) {
        window.removeEventListener('resize', this.resetOrigin, true);
      } else {
        window.detachEvent('onresize', this.resetOrigin);
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var value = nextProps.value;

      var values = _utils2.default.isArray(value) ? value : [value];
      if (!_utils2.default.isEqual(values, this.state.values)) {
        this.setState(_extends({}, this.initialState(nextProps)));
      }
    }
  }, {
    key: 'initialState',
    value: function initialState(props) {
      var value = props.value,
          max = props.max,
          min = props.min;

      var values = _utils2.default.isArray(value) ? value : [value];
      var positions = values.map(function (item) {
        var left = (item - min) / (max - min);
        return {
          left: left,
          originLeft: left
        };
      });
      return {
        positions: positions,
        values: values
      };
    }
  }, {
    key: 'resetOrigin',
    value: function resetOrigin() {
      var pathway = _reactDom2.default.findDOMNode(this.pathway).getBoundingClientRect();
      var maxDis = pathway.width;
      this.setState({ maxDis: maxDis });
    }
  }, {
    key: 'onChange',
    value: function onChange(index) {
      var _this2 = this;

      var positions = this.state.positions;
      var onChange = this.props.onChange;

      return function (left) {
        _this2.onDragEnd(left, index);
        var value = _this2.getValue(left);
        var returnValue = function returnValue(position) {
          return _this2.getValue(position.left);
        };
        var results = [].concat(_toConsumableArray(positions.slice(0, index).map(returnValue)), [value], _toConsumableArray(positions.slice(index + 1).map(returnValue)));
        onChange(results.length > 1 ? results : results[0]);
      };
    }
  }, {
    key: 'getValue',
    value: function getValue(left) {
      var _props = this.props,
          max = _props.max,
          min = _props.min;

      return parseInt(left * (max - min) + min, 10);
    }
  }, {
    key: 'onDraging',
    value: function onDraging(index) {
      var _this3 = this;

      return function (left) {
        return _this3.changePosition(index, { left: left });
      };
    }
  }, {
    key: 'onDragEnd',
    value: function onDragEnd(left, index) {
      this.changePosition(index, { originLeft: left });
    }
  }, {
    key: 'changePosition',
    value: function changePosition(index, position) {
      var positions = this.state.positions;

      this.setState({
        positions: [].concat(_toConsumableArray(positions.slice(0, index)), [(0, _objectAssign2.default)({}, positions[index], position)], _toConsumableArray(positions.slice(index + 1)))
      });
    }
  }, {
    key: 'renderDrager',
    value: function renderDrager() {
      var _this4 = this;

      var _state = this.state,
          positions = _state.positions,
          maxDis = _state.maxDis;
      var _props2 = this.props,
          color = _props2.color,
          tipFormatter = _props2.tipFormatter,
          minRange = _props2.minRange,
          max = _props2.max,
          min = _props2.min;

      var minDis = minRange / (max - min);
      return positions.map(function (item, index) {
        var left = item.left,
            originLeft = item.originLeft;

        var value = _this4.getValue(left);
        var minPosition = index - 1 >= 0 ? positions[index - 1].left + minDis : 0;
        var maxPosition = index + 1 < positions.length ? positions[index + 1].left - minDis : 1;
        return _react2.default.createElement(_Dragger2.default, {
          key: index,
          left: left,
          originLeft: originLeft,
          maxDis: maxDis,
          color: color,
          value: value,
          max: maxPosition,
          min: minPosition,
          onDragEnd: _this4.onChange(index),
          onDraging: _this4.onDraging(index),
          tipFormatter: tipFormatter
        });
      });
    }
  }, {
    key: 'renderProgressBar',
    value: function renderProgressBar() {
      var positions = this.state.positions;
      var color = this.props.color;

      var left = positions.length > 1 ? positions[0].left : 0;
      var right = 1 - positions.slice(-1)[0].left;
      return _react2.default.createElement(_ProgressBar2.default, {
        color: color,
        left: left,
        right: right
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this5 = this;

      var className = this.props.className;

      var containerClass = (0, _classnames2.default)(_slider2.default.container, className);
      return _react2.default.createElement(
        'div',
        { className: containerClass },
        _react2.default.createElement(
          'div',
          {
            className: _slider2.default.pathway,
            ref: function ref(_ref) {
              return _this5.pathway = _ref;
            } },
          this.renderDrager(),
          this.renderProgressBar()
        )
      );
    }
  }]);

  return Slider;
}(_react2.default.Component);

Slider.propTypes = {
  className: _react.PropTypes.string,
  tipFormatter: _react.PropTypes.func,
  min: _react.PropTypes.number,
  max: _react.PropTypes.number,
  value: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.array]),
  minRange: _react.PropTypes.number,
  color: _react.PropTypes.string,
  onChange: _react.PropTypes.func
};

Slider.defaultProps = {
  className: '',
  tipFormatter: null,
  min: 0,
  max: 100,
  value: 10,
  minRange: 1,
  color: 'green',
  onChange: function onChange() {}
};

exports.default = Slider;