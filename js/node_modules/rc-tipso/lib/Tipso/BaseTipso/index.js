'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _base_tipso = require('./base_tipso.css');

var _base_tipso2 = _interopRequireDefault(_base_tipso);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = {
  children: _react.PropTypes.oneOfType([_react.PropTypes.element, _react.PropTypes.node]),
  tipsoContent: _react.PropTypes.oneOfType([_react.PropTypes.element, _react.PropTypes.node]),
  className: _react.PropTypes.string,
  theme: _react.PropTypes.string,
  trigger: _react.PropTypes.string,
  tipsoStyle: _react.PropTypes.object,
  wrapperStyle: _react.PropTypes.object,
  wrapperClass: _react.PropTypes.string,
  position: _react.PropTypes.string,
  show: _react.PropTypes.bool
};

var defaultProps = {
  children: _react2.default.createElement('div', null),
  tipsoContent: null,
  className: '',
  theme: 'light',
  trigger: 'hover',
  tipsoStyle: {},
  wrapperStyle: {},
  wrapperClass: '',
  position: 'top',
  show: false
};

var BaseTipso = function (_React$Component) {
  _inherits(BaseTipso, _React$Component);

  function BaseTipso(props) {
    _classCallCheck(this, BaseTipso);

    var _this = _possibleConstructorReturn(this, (BaseTipso.__proto__ || Object.getPrototypeOf(BaseTipso)).call(this, props));

    _this.state = {
      show: props.show
    };
    _this.handleShowChange = _this.handleShowChange.bind(_this);
    _this.onOutsideClick = _this.onOutsideClick.bind(_this);
    return _this;
  }

  _createClass(BaseTipso, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (document.addEventListener) {
        document.addEventListener('mousedown', this.onOutsideClick, true);
      } else {
        document.attachEvent('onmousedown', this.onOutsideClick);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (document.removeEventListener) {
        document.removeEventListener('mousedown', this.onOutsideClick, true);
      } else {
        document.detachEvent('onmousedown', this.onOutsideClick);
      }
    }
  }, {
    key: 'handleShowChange',
    value: function handleShowChange(show) {
      var _this2 = this;

      return function () {
        return _this2.setState({ show: show });
      };
    }
  }, {
    key: 'onOutsideClick',
    value: function onOutsideClick(e) {
      e = e || window.event;
      var mouseTarget = typeof e.which !== "undefined" ? e.which : e.button;
      var isDescendantOfRoot = _reactDom2.default.findDOMNode(this.tipso).contains(e.target);
      if (!isDescendantOfRoot && mouseTarget === 1) {
        this.handleShowChange(false)();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var show = this.state.show;
      var _props = this.props,
          theme = _props.theme,
          position = _props.position,
          children = _props.children,
          className = _props.className,
          tipsoContent = _props.tipsoContent,
          tipsoStyle = _props.tipsoStyle,
          wrapperStyle = _props.wrapperStyle,
          wrapperClass = _props.wrapperClass;

      var containerClass = (0, _classnames2.default)(_base_tipso2.default["tipso-container"], _base_tipso2.default[theme], _base_tipso2.default[position], (this.props.show || show) && _base_tipso2.default["active"], className);

      var triggerFunc = this.triggerFunc;
      var tipsoTrigger = (0, _react.cloneElement)(children, triggerFunc);

      return _react2.default.createElement(
        'div',
        {
          ref: function ref(_ref) {
            return _this3.tipso = _ref;
          },
          style: wrapperStyle,
          className: (0, _classnames2.default)(_base_tipso2.default['tipso-wrapper'], wrapperClass) },
        tipsoTrigger,
        tipsoContent ? _react2.default.createElement(
          'div',
          {
            style: tipsoStyle,
            className: containerClass },
          _react2.default.createElement(
            'div',
            null,
            tipsoContent
          )
        ) : ''
      );
    }
  }, {
    key: 'triggerFunc',
    get: function get() {
      var trigger = this.props.trigger;

      var func = {
        hover: {
          onMouseOver: this.handleShowChange(true),
          onMouseEnter: this.handleShowChange(true),
          onMouseOut: this.handleShowChange(false),
          onMouseLeave: this.handleShowChange(false)
        },
        click: {
          onClick: this.handleShowChange(true)
        },
        focus: {
          onFocus: this.handleShowChange(true)
        }
      };
      return func[trigger] || {};
    }
  }]);

  return BaseTipso;
}(_react2.default.Component);

BaseTipso.propTypes = propTypes;
BaseTipso.defaultProps = defaultProps;

exports.default = BaseTipso;